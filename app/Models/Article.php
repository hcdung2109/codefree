<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;
use Illuminate\Support\Facades\Storage;

class Article extends Model
{
    // defined attributes
    protected $other_image;

    /**
     * Set default attributes
     * @var array
     */
    protected $attributes =  [
        'count_views' => 0,
        'is_published' => 1,
    ];

    /**
     * The attributes that are mass assignable
     * @var array
     */

    protected $fillable = [
        'title', 'slug', 'image', 'summary','desc', 'is_published','count_views','category_id'
    ];

    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub

        // before create
        static::creating(function ($article) {
            // create slug
            $article->updateSlug();

            // upload image
            $article->uploadImage();
        });

        // before update
        static::updating(function ($article) {

            $article->updateSlug();

        });

        // before delete
        static::deleting(function ($article){
            // delete Related Image
            $article->deleteImage();

        });
    }

    /**
     * create and update slug
     */
    public function updateSlug()
    {
        $this->slug = str_slug($this->title,"-");
    }

    /**
     * Create and update image
     */
    public function uploadImage()
    {
        if ($this->image)
        {
            // set image
            $file_name = $this->image->getClientOriginalName();
            $file_name = time().'-'.$file_name;
            $path = $this->image->storeAs(PATH_UPLOAD, $file_name);
            $this->image = $path;
        }
    }

    public function deleteImage()
    {
        @Storage::delete($this->getOriginal('image'));
    }


    /**
     * Define relationship between Category and article
     * @return \Illuminate\Database\Eloquent\Relations\BelongsTo
     */
    public function category()
    {
        return $this->belongsTo('App\Models\Category');
    }

    public function comment()
    {
        return $this->hasMany('App\Models\Comment');
    }

    public function user()
    {
        return $this->belongsTo('App\Models\User');
    }

    public function tag()
    {
        return $this->belongsToMany('App\Models\Tag');
    }

    public function getListArticle()
    {
        return self::with('category')->latest()->paginate();
    }

    public static function getListArticleByCategory($category_id,$limit = 0)
    {
        return self::where('category_id',$category_id)->limit($limit)->get();
    }

    public static function getArticleBySlugAndCategoryID($idCategory, $slug)
    {
        return self::where('category_id', $idCategory)->where('slug', $slug)->first();
    }

    public static function getArticleByCategoryID( $idCategory, $offset = 0, $limit = 10)
    {
        return self::where('category_id', $idCategory)->offset($offset)->limit($limit)->get();
    }

}
